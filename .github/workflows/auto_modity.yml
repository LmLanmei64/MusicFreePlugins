name: Update wy.js Plugin

on:
  repository_dispatch:
    types: [check_for_updates]
  workflow_dispatch:
  schedule:
    # 每3天运行一次
    - cron: '0 0 */3 * *'

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check-update.outputs.has_update }}
    steps:
      - name: Check upstream repository status
        id: check-update
        run: |
          # 安装依赖
          sudo apt-get update
          sudo apt-get install -y jq curl
          
          # 获取上游仓库最新 commit SHA
          UPSTREAM_SHA=$(curl -s "https://api.github.com/repos/ThomasBy2025/musicfree/commits/main" | jq -r .sha)
          
          # 获取上次记录的 commit SHA
          if [ -f .last_commit ]; then
            LAST_SHA=$(cat .last_commit)
          else
            LAST_SHA=""
          fi
          
          # 比较 commit SHA
          if [ "$UPSTREAM_SHA" != "$LAST_SHA" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "New update detected in upstream repository"
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
            echo "No updates in upstream repository"
          fi
          
          # 保存当前 SHA 供下次比较
          echo "$UPSTREAM_SHA" > .last_commit

  update-plugin:
    needs: check-upstream
    if: ${{ needs.check-upstream.outputs.has_update == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          
      - name: Download wy.js
        run: |
          # 使用 wget 下载文件
          wget -O wy.js "https://ghproxy.cn/raw.githubusercontent.com/ThomasBy2025/musicfree/main/plugins/wy.js"
          
          # 验证下载结果
          if [ ! -f wy.js ]; then
            echo "::error::wy.js 文件下载失败"
            exit 1
          fi
          
          if [ ! -s wy.js ]; then
            echo "::error::下载的 wy.js 文件为空"
            exit 1
          fi
          
          echo "wy.js 下载成功，大小: $(wc -c <wy.js) 字节"

      - name: Download function definitions
        run: |
          # 使用新的 URL 下载函数定义文件
          wget -O getLyric.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getLyric.txt"
          wget -O getMusicComments.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getMusicComments.txt"
          
          # 验证下载结果
          for file in getLyric.txt getMusicComments.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::$file 下载失败"
              exit 1
            fi
            if [ ! -s "$file" ]; then
              echo "::error::$file 文件为空"
              exit 1
            fi
            echo "$file 下载成功，大小: $(wc -c <"$file") 字节"
          done

      - name: Create Node.js replacement script
        run: |
          # 创建安全的 Node.js 替换脚本
          cat > replace-functions.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // 读取源文件和函数定义
          const sourceFile = fs.readFileSync('wy.js', 'utf-8');
          const functions = {
            getLyric: fs.readFileSync('getLyric.txt', 'utf-8'),
            getMusicComments: fs.readFileSync('getMusicComments.txt', 'utf-8')
          };
          
          // 查找 axios 变量名
          const axiosRegex = /const\s+(\w+)\s*=\s*require\s*\(\s*['"]axios['"]\s*\)/;
          const axiosMatch = sourceFile.match(axiosRegex);
          const axiosVar = axiosMatch ? axiosMatch[1] : 'axios';
          
          // 定义替换函数
          function replaceFunction(source, funcName, newCode) {
            // 构建匹配函数签名的正则表达式
            const signaturePattern = new RegExp(
              `(async\\s+)?function\\s+${funcName}\\s*\\([^)]*\\)\\s*\\{[\\s\\S]*?\\n\\}`,
              'g'
            );
            
            // 尝试匹配原始函数
            const matches = source.match(signaturePattern);
            if (!matches || matches.length === 0) {
              console.error(`未找到函数: ${funcName}`);
              return source;
            }
            
            // 替换函数中的 axios 变量名
            const adjustedCode = newCode.replace(/axios/g, axiosVar);
            
            // 替换所有匹配项
            return source.replace(signaturePattern, adjustedCode);
          }
          
          // 执行所有替换
          let modifiedContent = sourceFile;
          for (const [funcName, funcCode] of Object.entries(functions)) {
            modifiedContent = replaceFunction(modifiedContent, funcName, funcCode);
          }
          
          // 写入修改后的文件
          fs.writeFileSync('wy_modified.js', modifiedContent);
          console.log(`函数替换完成，使用的axios变量名: ${axiosVar}`);
          EOF
          
          echo "Node.js 替换脚本已创建"

      - name: Run Node.js replacement
        run: |
          # 运行 Node.js 替换脚本
          node replace-function