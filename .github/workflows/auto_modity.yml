name: Update wy.js Plugin

on:
  repository_dispatch:
    types: [check_for_updates]
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'  # 每3天运行一次

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check-update.outputs.has_update }}
    steps:
      - name: Check upstream repository status
        id: check-update
        run: |
          # 安装依赖
          sudo apt-get update
          sudo apt-get install -y jq curl
          
          # 获取上游仓库最新 commit SHA
          UPSTREAM_SHA=$(curl -s "https://api.github.com/repos/ThomasBy2025/musicfree/commits/main" | jq -r .sha)
          
          # 获取上次记录的 commit SHA
          if [ -f .last_commit ]; then
            LAST_SHA=$(cat .last_commit)
          else
            LAST_SHA=""
          fi
          
          # 比较 commit SHA
          if [ "$UPSTREAM_SHA" != "$LAST_SHA" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "New update detected in upstream repository"
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
            echo "No updates in upstream repository"
          fi
          
          # 保存当前 SHA 供下次比较
          echo "$UPSTREAM_SHA" > .last_commit

  update-plugin:
    needs: check-upstream
    if: ${{ needs.check-upstream.outputs.has_update == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          
      - name: Download wy.js
        run: |
          # 使用 wget 下载文件
          wget -O wy.js "https://ghproxy.cn/raw.githubusercontent.com/ThomasBy2025/musicfree/main/plugins/wy.js"
          
          # 验证下载结果
          if [ ! -f wy.js ]; then
            echo "::error::wy.js 文件下载失败"
            exit 1
          fi
          
          if [ ! -s wy.js ]; then
            echo "::error::下载的 wy.js 文件为空"
            exit 1
          fi
          
          echo "wy.js 下载成功，大小: $(wc -c <wy.js) 字节"

      - name: Download function definitions
        run: |
          # 使用新的 URL 下载函数定义文件
          wget -O getLyric.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getLyric.txt"
          wget -O getMusicComments.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getMusicComments.txt"
          
          # 验证下载结果
          for file in getLyric.txt getMusicComments.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::$file 下载失败"
              exit 1
            fi
            if [ ! -s "$file" ]; then
              echo "::error::$file 文件为空"
              exit 1
            fi
            echo "$file 下载成功，大小: $(wc -c <"$file") 字节"
          done

      - name: Create advanced replacement script
        run: |
          # 创建高级替换脚本
          cat > advanced-replace.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // 读取源文件和函数定义
          const sourceContent = fs.readFileSync('wy.js', 'utf-8');
          const newFunctions = {
            getLyric: fs.readFileSync('getLyric.txt', 'utf-8'),
            getMusicComments: fs.readFileSync('getMusicComments.txt', 'utf-8')
          };
          
          // 1. 提取 axios 变量名
          const axiosVarMatch = sourceContent.match(/const\s+(\w+)\s*=\s*require\("axios"\)/);
          const axiosVarName = axiosVarMatch ? axiosVarMatch[1] : 'axios';
          console.log(`检测到 axios 变量名: ${axiosVarName}`);
          
          // 2. 替换函数中的 axios 引用
          for (const [funcName, funcCode] of Object.entries(newFunctions)) {
            newFunctions[funcName] = funcCode.replace(/axios/g, axiosVarName);
          }
          
          // 3. 精确函数替换（支持嵌套大括号）
          let modifiedContent = sourceContent;
          
          function replaceFunction(source, funcName, newCode) {
            // 构建匹配函数签名的正则表达式
            const signaturePattern = new RegExp(
              `(async\\s+)?function\\s+${funcName}\\s*\\([^)]*\\)\\s*\\{`
            );
            
            const match = source.match(signaturePattern);
            if (!match) {
              console.error(`未找到函数: ${funcName}`);
              return source;
            }
            
            const startIndex = match.index;
            let braceCount = 0;
            let currentIndex = startIndex;
            let inString = false;
            let stringChar = null;
            
            // 查找函数结束位置（匹配大括号）
            for (; currentIndex < source.length; currentIndex++) {
              const char = source[currentIndex];
              
              // 处理字符串字面量
              if (!inString && (char === '"' || char === "'" || char === '`')) {
                inString = true;
                stringChar = char;
              } else if (inString && char === stringChar) {
                inString = false;
                stringChar = null;
              }
              
              // 如果不在字符串中，统计大括号
              if (!inString) {
                if (char === '{') braceCount++;
                if (char === '}') braceCount--;
                
                // 当大括号计数归零时，找到函数结束位置
                if (braceCount === 0) {
                  break;
                }
              }
            }
            
            if (braceCount !== 0) {
              console.error(`函数 ${funcName} 未正确结束`);
              return source;
            }
            
            // 替换函数体（包含函数签名和整个函数体）
            const endIndex = currentIndex + 1; // 包含结束大括号
            const before = source.substring(0, startIndex);
            const after = source.substring(endIndex);
            
            return before + newCode + after;
          }
          
          // 执行函数替换
          modifiedContent = replaceFunction(modifiedContent, 'getLyric', newFunctions.getLyric);
          modifiedContent = replaceFunction(modifiedContent, 'getMusicComments', newFunctions.getMusicComments);
          
          // 4. 替换 srcUrl
          const newSrcUrl = "https://testingcf.jsdelivr.net/gh/Lmlanmei64/MusicFreePlugins@master/plugins/wy.js";
          modifiedContent = modifiedContent.replace(
            /(srcUrl:\s*['"])([^'"]+)(['"])/,
            `$1${newSrcUrl}$3`
          );
          
          // 5. 检查是否需要更新
          const currentPluginPath = 'plugins/wy.js';
          let needsUpdate = true;
          
          if (fs.existsSync(currentPluginPath)) {
            const currentContent = fs.readFileSync(currentPluginPath, 'utf-8');
            if (currentContent === modifiedContent) {
              console.log('内容未更改，跳过更新');
              needsUpdate = false;
            }
          }
          
          // 写入修改后的文件
          fs.writeFileSync('wy_modified.js', modifiedContent);
          
          // 设置环境变量指示是否需要更新
          if (needsUpdate) {
            fs.writeFileSync('needs_update', 'true');
            console.log('内容已更改，需要更新');
          } else {
            fs.writeFileSync('needs_update', 'false');
          }
          EOF
          
          echo "高级替换脚本已创建"

      - name: Run advanced replacement
        run: |
          # 运行高级替换脚本
          node advanced-replace.js
          
          # 验证替换结果
          if [ ! -f wy_modified.js ]; then
            echo "::error::修改后的文件未生成"
            exit 1
          fi
          
          if [ ! -s wy_modified.js ]; then
            echo "::error::修改后的文件为空"
            exit 1
          fi
          
          # 检查是否需要更新
          if [ "$(cat needs_update)" = "true" ]; then
            mv wy_modified.js wy.js
            echo "函数替换成功，新文件大小: $(wc -c <wy.js) 字节"
          else
            echo "内容未更改，跳过文件替换"
            rm wy_modified.js
          fi

      - name: Upload modified file (if changed)
        if: ${{ success() && github.event_name != 'workflow_dispatch' && env.NEEDS_UPDATE == 'true' }}
        run: |
          if [ -f wy.js ]; then
            mkdir -p plugins
            mv wy.js plugins/
            echo "文件已移动到 plugins/ 目录"
          else
            echo "没有需要更新的文件"
          fi

      - name: Commit changes (if needed)
        if: ${{ success() && env.NEEDS_UPDATE == 'true' }}
        run: |
          # 设置环境变量
          echo "NEEDS_UPDATE=true" >> $GITHUB_ENV
          
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # 添加修改的文件
          git add plugins/wy.js
          
          # 仅在非手动运行且文件存在时添加 .last_commit
          if [ "${{ github.event_name }}" != "workflow_dispatch" ] && [ -f .last_commit ]; then
            git add .last_commit
          fi
          
          # 检查是否有需要提交的更改
          if git diff-index --quiet HEAD; then
            echo "没有需要提交的更改"
          else
            # 根据触发方式设置不同的提交信息
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              COMMIT_MSG="chore: manual update wy.js plugin [skip ci]"
            else
              COMMIT_MSG="chore: auto update wy.js plugin from upstream [skip ci]"
            fi
            
            git commit -m "$COMMIT_MSG"
            git push
          fi

      - name: Skip commit if no changes
        if: ${{ success() && env.NEEDS_UPDATE != 'true' }}
        run: |
          echo "内容未更改，跳过提交"
          # 设置环境变量指示无需更新
          echo "NEEDS_UPDATE=false" >> $GITHUB_ENV