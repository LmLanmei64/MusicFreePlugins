name: Update wy.js Plugin

on:
  repository_dispatch:
    types: [check_for_updates]
  workflow_dispatch:
  schedule:
    # 每3天运行一次
    - cron: '0 0 */3 * *'

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check-update.outputs.has_update }}
    steps:
      - name: Check upstream repository status
        id: check-update
        run: |
          # 安装依赖
          sudo apt-get update
          sudo apt-get install -y jq curl
          
          # 获取上游仓库最新 commit SHA
          UPSTREAM_SHA=$(curl -s "https://api.github.com/repos/ThomasBy2025/musicfree/commits/main" | jq -r .sha)
          
          # 获取上次记录的 commit SHA
          if [ -f .last_commit ]; then
            LAST_SHA=$(cat .last_commit)
          else
            LAST_SHA=""
          fi
          
          # 比较 commit SHA
          if [ "$UPSTREAM_SHA" != "$LAST_SHA" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "New update detected in upstream repository"
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
            echo "No updates in upstream repository"
          fi
          
          # 保存当前 SHA 供下次比较
          echo "$UPSTREAM_SHA" > .last_commit

  update-plugin:
    needs: check-upstream
    if: ${{ needs.check-upstream.outputs.has_update == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          
      - name: Download wy.js
        run: |
          # 使用 wget 下载文件
          wget -O wy.js "https://ghproxy.cn/raw.githubusercontent.com/ThomasBy2025/musicfree/main/plugins/wy.js"
          
          # 验证下载结果
          if [ ! -f wy.js ]; then
            echo "::error::wy.js 文件下载失败"
            exit 1
          fi
          
          if [ ! -s wy.js ]; then
            echo "::error::下载的 wy.js 文件为空"
            exit 1
          fi
          
          echo "wy.js 下载成功，大小: $(wc -c <wy.js) 字节"

      - name: Download function definitions
        run: |
          # 使用新的 URL 下载函数定义文件
          wget -O getLyric.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getLyric.txt"
          wget -O getMusicComments.txt "https://ghproxy.cn/raw.githubusercontent.com/Lmlanmei64/MusicFreePlugins/master/getMusicComments.txt"
          
          # 验证下载结果
          for file in getLyric.txt getMusicComments.txt; do
            if [ ! -f "$file" ]; then
              echo "::error::$file 下载失败"
              exit 1
            fi
            if [ ! -s "$file" ]; then
              echo "::error::$file 文件为空"
              exit 1
            fi
            echo "$file 下载成功，大小: $(wc -c <"$file") 字节"
          done

      - name: Create and run Node.js replacement script
        run: |
    # 创建并直接运行 Node.js 替换脚本
    node << 'EOF'
    const fs = require('fs');
    const path = require('path');
    
    // 读取源文件和函数定义
    const sourceFile = fs.readFileSync('wy.js', 'utf-8');
    const getLyricCode = fs.readFileSync('getLyric.txt', 'utf-8');
    const getMusicCommentsCode = fs.readFileSync('getMusicComments.txt', 'utf-8');
    
    // 查找 axios 变量名
    const axiosRegex = /const\s+(\w+)\s*=\s*require\s*\(\s*['"]axios['"]\s*\)/;
    const axiosMatch = sourceFile.match(axiosRegex);
    const axiosVar = axiosMatch ? axiosMatch[1] : 'axios';
    console.log(`检测到axios变量名: ${axiosVar}`);
    
    // 定义替换函数
    function replaceFunction(source, funcName, newCode) {
      // 构建匹配函数签名的正则表达式
      const signaturePattern = new RegExp(
        `(async\\s+)?function\\s+${funcName}\\s*\\([^)]*\\)\\s*\\{[\\s\\S]*?\\n\\}`,
        'g'
      );
      
      // 尝试匹配原始函数
      const matches = source.match(signaturePattern);
      if (!matches || matches.length === 0) {
        console.error(`未找到函数: ${funcName}`);
        return source;
      }
      
      // 替换函数中的 axios 变量名
      const adjustedCode = newCode.replace(/axios/g, axiosVar);
      
      // 替换所有匹配项
      return source.replace(signaturePattern, adjustedCode);
    }
    
    // 执行所有替换
    let modifiedContent = sourceFile;
    modifiedContent = replaceFunction(modifiedContent, 'getLyric', getLyricCode);
    modifiedContent = replaceFunction(modifiedContent, 'getMusicComments', getMusicCommentsCode);
    
    // 替换 appVersion
    const appVersionRegex = /(appVersion\s*:\s*)(['"][^'"]*['"])/;
    if (appVersionRegex.test(modifiedContent)) {
      modifiedContent = modifiedContent.replace(appVersionRegex, '$1">0.2.0-alpha"');
      console.log('appVersion 替换成功');
    } else {
      console.warn('未找到 appVersion，已跳过替换');
    }
    
    // 添加/更新 description
    const descText = "本插件修改于[ThomasBy2025/musicfree](https://github.com/ThomasBy2025/musicfree)\\n配合[xujin621/Photo](https://gitee.com/xujin621/Photo)中的“元力WY”插件可播放会员歌曲的同时实现所有功能（需要在musicfree将该插件“音源重定向”为“元力WY”）";
    const descRegex = /(description\s*:\s*)(['"][^'"]*['"])/;
    
    if (descRegex.test(modifiedContent)) {
      // 替换现有 description
      modifiedContent = modifiedContent.replace(descRegex, `$1'${descText}'`);
      console.log('description 替换成功');
    } else {
      // 添加新的 description
      modifiedContent = modifiedContent.replace(
        /(module\.exports\s*=\s*\{)([\s\S]*?)(\n\})/,
        `$1$2,\n  description: '${descText}'$3`
      );
      console.log('description 添加成功');
    }
    
    // 写入修改后的文件
    fs.writeFileSync('wy_modified.js', modifiedContent);
    console.log('函数替换完成');
    EOF
    
    # 验证替换结果
    if [ ! -f wy_modified.js ]; then
      echo "::error::修改后的文件未生成"
      exit 1
    fi
    
    if [ ! -s wy_modified.js ]; then
      echo "::error::修改后的文件为空"
      exit 1
    fi
    
    # 检查替换后的函数是否正确
    if ! grep -q "async function getLyric(musicItem) {" wy_modified.js; then
      echo "::error::getLyric函数替换失败"
      exit 1
    fi
    
    # 检查 appVersion 是否替换成功
    if ! grep -q 'appVersion: ">0.2.0-alpha"' wy_modified.js; then
      echo "::warning::appVersion 替换失败或未找到"
    fi
    
    # 检查 description 是否添加成功
    if ! grep -q 'description: ' wy_modified.js; then
      echo "::warning::description 添加失败"
    fi
    
    mv wy_modified.js wy.js
    echo "函数替换成功，新文件大小: $(wc -c <wy.js) 字节"

      - name: Replace srcUrl
        run: |
          # 设置新的 srcUrl
          new_srcUrl="https://testingcf.jsdelivr.net/gh/Lmlanmei64/MusicFreePlugins@master/plugins/wy.js"
          
          # 使用 Node.js 安全替换 srcUrl
          node -e "const fs = require('fs'); 
                   const content = fs.readFileSync('wy.js', 'utf-8'); 
                   const newContent = content.replace(/(srcUrl:\\s*['\"])([^'\"]+)(['\"])/, 
                   'srcUrl: \"$new_srcUrl\"'); 
                   fs.writeFileSync('wy.js', newContent); 
                   console.log('srcUrl 替换完成');"
          
          # 验证替换结果
          if grep -q "$new_srcUrl" wy.js; then
            echo "srcUrl 替换成功"
          else
            echo "::error::srcUrl 替换失败"
            exit 1
          fi

      - name: Upload modified file
        run: |
          mkdir -p plugins
          mv wy.js plugins/
          echo "文件已移动到 plugins/ 目录"

      - name: Force commit changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # 强制添加文件
          git add -f plugins/wy.js
          
          # 添加 .last_commit 文件（如果存在）
          if [ -f .last_commit ]; then
            git add .last_commit
          fi
          
          # 强制提交，无论是否有更改
          COMMIT_MSG="chore: auto update wy.js plugin"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_MSG="chore: manual update wy.js plugin"
          fi
          
          git commit --allow-empty -m "$COMMIT_MSG [skip ci]"
          git push